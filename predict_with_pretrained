# RESNET18模型
#1 使用已有的预训练模型（不需要数据集）
import mxnet as mx
import matplotlib.pyplot as plt
import cv2
import numpy as np
from PIL import Image
# define a simple data batch
from collections import namedtuple

####
path='http://data.mxnet.io/models/imagenet/restnet/'
[mx.test_utils.download(path+'18-layers/resnet-18-symbol.json'),
 mx.test_utils.download(path+'18-layers/resnet-18-0000.params'),
 mx.test_utils.download(path+'synset.txt')]

sym, arg_params, aux_params = mx.model.load_checkpoint('resnet-18', 0)
mod = mx.mod.Module(symbol=sym, context=mx.cpu(), label_names=None)
mod.bind(for_training=False, data_shapes=[('data', (1,3,224,224))],
         label_shapes=mod._label_shapes)
mod.set_params(arg_params, aux_params, allow_missing=True)
with open('synset.txt', 'r') as f:
    labels = [l.rstrip() for l in f]
##

# test predict
def get_image(fnamepath, show=False):
    # show the image
    img = cv2.cvtColor(cv2.imread(fnamepath), cv2.COLOR_BGR2RGB)
    if img is None:
       return None
    # convert into format (batch, RGB, width, height)
    img = cv2.resize(img, (224, 224))
    img = np.swapaxes(img, 0, 2)
    img = np.swapaxes(img, 1, 2)
    Batch = namedtuple('Batch', ['data'])
    img = img[np.newaxis, :]
    return img

def predict(fnamepath):
    img = get_image(fnamepath, show=True)
    # compute the predict probabilities
    mod.forward(Batch([mx.nd.array(img)]))
    prob = mod.get_outputs()[0].asnumpy()
    # print the top-1
    prob = np.squeeze(prob)
    a = np.argsort(prob)[::-1]
    for i in a[0]:
        print('probability=%f, class=%s' %(prob[i], labels[i]))

predict(/Users/caishuyi/Desktop/cat_dog/testing/0001.jpg)
